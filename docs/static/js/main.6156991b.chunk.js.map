{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EACVC,mBAAS,IADC,mBACxCC,EADwC,KAC5BC,EAD4B,KAchD,OACI,0BAAMC,SATU,SAACC,GACjBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMd,4BAAMD,GACN,2BACIQ,KAAK,OACLC,MAAQT,EACRU,SAlBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,YCJnBG,EAAc,SAAC,GAAyB,EAAtBC,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IAEtC,OACI,yBAAKC,UAAU,0CACX,yBAAKC,IAAMF,EAAMG,IAAMJ,IACvB,+BAAMA,EAAN,O,uBCPCK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACoCO,UAAUF,GAD9C,+DAEAG,MAAOR,GAFP,cAEbS,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAKc,EAAIC,OAAOC,iBAAiBhB,QATtB,kBAeZY,GAfY,4CAAH,sDCIPK,EAAU,SAAC,GAAoB,IAAjBZ,EAAgB,EAAhBA,SAAgB,ECDf,SAAEA,GAAe,IAAD,EACZrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAH2B,mBAChCC,EADgC,KACzBC,EADyB,KAiBxC,OAVAC,qBAAW,WACPjB,EAASC,GACJiB,MAAM,SAAAC,GACHH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGtB,CAAEb,IAEEc,EDf4BK,CAAcnB,GAAlCU,EADwB,EAC/BJ,KAAeO,EADgB,EAChBA,QAEvB,OACI,oCACI,wBAAIjB,UAAU,qCAAsCI,GAClDa,GAAW,uBAAGjB,UAAU,oCAAb,WACb,yBAAKA,UAAY,aAEbc,EAAOF,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIW,IAAMX,EAAIhB,IACLgB,UEWdY,EAvBM,WACjB,IADuB,EAEa1C,mBADb,CAAC,cADD,mBAEhB2C,EAFgB,KAEJ5C,EAFI,KAIvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAkBA,IAC/B,6BACA,4BAEQ4C,EAAWd,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACIoB,IAAMpB,EACNA,SAAWA,UCbvCuB,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.6156991b.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n    const [ inputValue, setInputValue ] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const hadleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cat =>[ inputValue, ...cat ] );\r\n            setInputValue('');//Luego de añadir, limpiar la caja de texto.\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { hadleSubmit }>\r\n            <h1>{ inputValue }</h1>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ( { id, title, url } ) => {\r\n    //console.log( { id, title, url } );\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n\r\n","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=Si0pLJ0hl8BoLLHfQr5pRd52DwCegpNU`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    \r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    //En este contexto no tenemos \"setImages\"\r\n    //setImages( gifs );\r\n    return gifs;\r\n}","import React from 'react';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n    const { data : images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className = \"card-grid\">\r\n            {\r\n                images.map( img => (\r\n                    <GifGridItem \r\n                        key={ img.id }\r\n                        { ...img }\r\n                    />\r\n                ))\r\n            }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [ state, setState ] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    //Evalua este efecto únicamente cuando la categoria cambia\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [ category ] );\r\n\r\n    return state;// retorna { data: [], loading: true }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const categoriesData = ['One Punch'];\r\n    const [categories, setCategories] = useState(categoriesData);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = { setCategories } />\r\n            <hr />\r\n            <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}